import os
import aiohttp
from datetime import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

TOKEN = "7012457237:AAFvXS3AJt4Y6KM_oHuMYMqb-WWEl6OenDs"
PRIVATE_GROUP_LINK = "https://t.me/+5naTkmoBWK9hMWVi"
API_URL = "https://script.google.com/macros/s/AKfycbweEBeUWzuPmLykeKIDOyGVfNvKcJ4F1ChaJ07oV3YYLIp8OXqMnVLEMDSMBIbdjc-qog/exec"

messages = {
    'kz': {
        'start': 'üëã –°”ô–ª–µ–º! “∞–ë–¢ –∫—É—Ä—Å—ã–Ω–∞ –¥–∞–π—ã–Ω–¥—ã“õ—Ç—ã –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω, —Ç–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–±–µ–Ω –±”©–ª—ñ—Å—ñ“£—ñ–∑.',
        'choose_language': 'üî§ –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:',
        'thank_you': 'üôè –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –±”©–ª—ñ—Å–∫–µ–Ω—ñ“£—ñ–∑ “Ø—à—ñ–Ω —Ä–∞“õ–º–µ—Ç! \n–ï–Ω–¥—ñ —Ç–æ–ª—ã“õ –∞—Ç—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:',
        'loading': '‚è≥ –î–µ—Ä–µ–∫—Ç–µ—Ä—ñ“£—ñ–∑ –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ...',
        'success': 'üòä –†–∞“õ–º–µ—Ç, {}! –°—ñ–∑–¥—ñ“£ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑: {}',
        'join_link': 'üîó –ñ–µ–∫–µ —á–∞—Ç“õ–∞ “õ–æ—Å—ã–ª—É “Ø—à—ñ–Ω, –º—ã–Ω–∞ —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑: {}',
        'error': '‚ùå –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –±–æ–ª–¥—ã.',
        'request_contact': 'üìû ”®—Ç—ñ–Ω—ñ—à, –∫–æ–Ω—Ç–∞–∫—Ç –∞“õ–ø–∞—Ä–∞—Ç—ã–Ω –±”©–ª—ñ—Å—ñ“£—ñ–∑.',
        'share_contact': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ–º–¥—ñ –±”©–ª—ñ—Å–µ–π—ñ–Ω',
    },
    'ru': {
        'start': 'üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –ï–ù–¢, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
        'choose_language': 'üî§ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'thank_you': 'üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞! \n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:',
        'loading': '‚è≥ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è...',
        'success': 'üòä –°–ø–∞—Å–∏–±–æ, {}! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}',
        'join_link': 'üîó –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–∏—á–Ω–æ–º—É —á–∞—Ç—É: {}',
        'error': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.',
        'request_contact': 'üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.',
        'share_contact': 'üìû –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
    }
}

LANGUAGE, PHONE, FULL_NAME = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    language_buttons = [
        [KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(language_buttons, one_time_keyboard=True)
    await update.message.reply_text("üî§ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=reply_markup)
    return LANGUAGE

async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    language = 'kz' if update.message.text == "üá∞üáø “ö–∞–∑–∞“õ—à–∞" else 'ru'
    context.user_data['language'] = language
    button = KeyboardButton(messages[language]['share_contact'], request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[button]], one_time_keyboard=True)
    await update.message.reply_text(messages[language]['start'], reply_markup=reply_markup)
    return PHONE

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_contact = update.message.contact
    if user_contact:
        phone_number = user_contact.phone_number
        context.user_data["phone_number"] = phone_number
        language = context.user_data.get('language', 'kz')
        await update.message.reply_text(messages[language]['thank_you'])
        return FULL_NAME
    else:
        language = context.user_data.get('language', 'kz')
        await update.message.reply_text(messages[language]['request_contact'])

async def handle_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_full_name = update.message.text
    phone_number = context.user_data.get("phone_number")
    language = context.user_data.get('language', 'kz')
    loading_message = await update.message.reply_text(messages[language]['loading'])
    submitted_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    success = await send_post_request(user_full_name, phone_number, submitted_at)
    await loading_message.delete()
    if success:
        await update.message.reply_text(messages[language]['success'].format(user_full_name, phone_number))
        await update.message.reply_text(messages[language]['join_link'].format(PRIVATE_GROUP_LINK))
    else:
        await update.message.reply_text(messages[language]['error'])

    return ConversationHandler.END

async def send_post_request(full_name: str, phone_number: str, submitted_at: str) -> bool:
    form_data = {
        "–ê—Ç—ã-–∂”©–Ω—ñ": full_name,
        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": phone_number,
        "–ñ—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω –£–∞“õ—ã—Ç—ã": submitted_at,
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL, data=form_data) as response:
            if response.status == 200:
                print("–î–µ—Ä–µ–∫—Ç–µ—Ä —Å”ô—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")
                return True
            else:
                print(f"“ö–∞—Ç–µ: {response.status}")
                return False

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_language_selection)],
            PHONE: [MessageHandler(filters.CONTACT, handle_contact)],
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_name)],
        },
        fallbacks=[],
        allow_reentry=True,
    )

    application.add_handler(conversation_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
